// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: Customers)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomers is a mock of Customers interface.
type MockCustomers struct {
	ctrl     *gomock.Controller
	recorder *MockCustomersMockRecorder
}

// MockCustomersMockRecorder is the mock recorder for MockCustomers.
type MockCustomersMockRecorder struct {
	mock *MockCustomers
}

// NewMockCustomers creates a new mock instance.
func NewMockCustomers(ctrl *gomock.Controller) *MockCustomers {
	mock := &MockCustomers{ctrl: ctrl}
	mock.recorder = &MockCustomersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomers) EXPECT() *MockCustomersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomers) Create(arg0 models.CustomerData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomersMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomers)(nil).Create), arg0)
}

// DeleteAll mocks base method.
func (m *MockCustomers) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockCustomersMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockCustomers)(nil).DeleteAll))
}

// Get mocks base method.
func (m *MockCustomers) Get(arg0 ...int) ([]models.CustomerData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].([]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomersMockRecorder) Get(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomers)(nil).Get), arg0...)
}

// GetByFeeAmountAndSessions mocks base method.
func (m *MockCustomers) GetByFeeAmountAndSessions(arg0 float64, arg1 string) ([]models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFeeAmountAndSessions", arg0, arg1)
	ret0, _ := ret[0].([]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFeeAmountAndSessions indicates an expected call of GetByFeeAmountAndSessions.
func (mr *MockCustomersMockRecorder) GetByFeeAmountAndSessions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFeeAmountAndSessions", reflect.TypeOf((*MockCustomers)(nil).GetByFeeAmountAndSessions), arg0, arg1)
}

// GetByGroup mocks base method.
func (m *MockCustomers) GetByGroup(arg0 string) ([]models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroup", arg0)
	ret0, _ := ret[0].([]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroup indicates an expected call of GetByGroup.
func (mr *MockCustomersMockRecorder) GetByGroup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroup", reflect.TypeOf((*MockCustomers)(nil).GetByGroup), arg0)
}

// GetById mocks base method.
func (m *MockCustomers) GetById(arg0 string) (*models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCustomersMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCustomers)(nil).GetById), arg0)
}

// GetByLogin mocks base method.
func (m *MockCustomers) GetByLogin(arg0 string) (*models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0)
	ret0, _ := ret[0].(*models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockCustomersMockRecorder) GetByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockCustomers)(nil).GetByLogin), arg0)
}

// GetByState mocks base method.
func (m *MockCustomers) GetByState(arg0 int) ([]models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByState", arg0)
	ret0, _ := ret[0].([]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByState indicates an expected call of GetByState.
func (mr *MockCustomersMockRecorder) GetByState(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByState", reflect.TypeOf((*MockCustomers)(nil).GetByState), arg0)
}

// GetByUid mocks base method.
func (m *MockCustomers) GetByUid(arg0 string) (*models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUid", arg0)
	ret0, _ := ret[0].(*models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUid indicates an expected call of GetByUid.
func (mr *MockCustomersMockRecorder) GetByUid(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUid", reflect.TypeOf((*MockCustomers)(nil).GetByUid), arg0)
}

// GetGroupByName mocks base method.
func (m *MockCustomers) GetGroupByName(arg0 string) (*models.CustomerGroupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByName", arg0)
	ret0, _ := ret[0].(*models.CustomerGroupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupByName indicates an expected call of GetGroupByName.
func (mr *MockCustomersMockRecorder) GetGroupByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByName", reflect.TypeOf((*MockCustomers)(nil).GetGroupByName), arg0)
}

// IsBlocked mocks base method.
func (m *MockCustomers) IsBlocked(arg0 int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockCustomersMockRecorder) IsBlocked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockCustomers)(nil).IsBlocked), arg0)
}

// SetCredit mocks base method.
func (m *MockCustomers) SetCredit(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCredit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCredit indicates an expected call of SetCredit.
func (mr *MockCustomersMockRecorder) SetCredit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCredit", reflect.TypeOf((*MockCustomers)(nil).SetCredit), arg0, arg1)
}

// SetCreditDaysLeft mocks base method.
func (m *MockCustomers) SetCreditDaysLeft(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCreditDaysLeft", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCreditDaysLeft indicates an expected call of SetCreditDaysLeft.
func (mr *MockCustomersMockRecorder) SetCreditDaysLeft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreditDaysLeft", reflect.TypeOf((*MockCustomers)(nil).SetCreditDaysLeft), arg0, arg1)
}

// SetCreditExpire mocks base method.
func (m *MockCustomers) SetCreditExpire(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCreditExpire", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCreditExpire indicates an expected call of SetCreditExpire.
func (mr *MockCustomersMockRecorder) SetCreditExpire(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreditExpire", reflect.TypeOf((*MockCustomers)(nil).SetCreditExpire), arg0, arg1)
}

// SetDeposit mocks base method.
func (m *MockCustomers) SetDeposit(arg0 string, arg1 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeposit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeposit indicates an expected call of SetDeposit.
func (mr *MockCustomersMockRecorder) SetDeposit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeposit", reflect.TypeOf((*MockCustomers)(nil).SetDeposit), arg0, arg1)
}

// SetFlag mocks base method.
func (m *MockCustomers) SetFlag(arg0 models.CustomerData, arg1 models.CustomerFlagData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFlag", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFlag indicates an expected call of SetFlag.
func (mr *MockCustomersMockRecorder) SetFlag(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFlag", reflect.TypeOf((*MockCustomers)(nil).SetFlag), arg0, arg1)
}

// SetServiceInternetState mocks base method.
func (m *MockCustomers) SetServiceInternetState(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceInternetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetServiceInternetState indicates an expected call of SetServiceInternetState.
func (mr *MockCustomersMockRecorder) SetServiceInternetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceInternetState", reflect.TypeOf((*MockCustomers)(nil).SetServiceInternetState), arg0, arg1)
}

// SetState mocks base method.
func (m *MockCustomers) SetState(arg0 string, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockCustomersMockRecorder) SetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockCustomers)(nil).SetState), arg0, arg1)
}

// Update mocks base method.
func (m *MockCustomers) Update(arg0 models.CustomerData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomersMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomers)(nil).Update), arg0)
}

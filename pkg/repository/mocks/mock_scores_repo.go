// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: Scores)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	repository "code.evixo.ru/ncc/ncc-backend/pkg/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockScores is a mock of Scores interface.
type MockScores struct {
	ctrl     *gomock.Controller
	recorder *MockScoresMockRecorder
}

// MockScoresMockRecorder is the mock recorder for MockScores.
type MockScoresMockRecorder struct {
	mock *MockScores
}

// NewMockScores creates a new mock instance.
func NewMockScores(ctrl *gomock.Controller) *MockScores {
	mock := &MockScores{ctrl: ctrl}
	mock.recorder = &MockScoresMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScores) EXPECT() *MockScoresMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScores) Create(arg0 models.PaymentData, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockScoresMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScores)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockScores) Get(arg0 repository.TimePeriod) ([]models.ScoreLogData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]models.ScoreLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScoresMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScores)(nil).Get), arg0)
}

// GetLastScore mocks base method.
func (m *MockScores) GetLastScore() (*models.ScoreLogData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastScore")
	ret0, _ := ret[0].(*models.ScoreLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastScore indicates an expected call of GetLastScore.
func (mr *MockScoresMockRecorder) GetLastScore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastScore", reflect.TypeOf((*MockScores)(nil).GetLastScore))
}

// GetPaymentTypes mocks base method.
func (m *MockScores) GetPaymentTypes() ([]models.ScorePaymentTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentTypes")
	ret0, _ := ret[0].([]models.ScorePaymentTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentTypes indicates an expected call of GetPaymentTypes.
func (mr *MockScoresMockRecorder) GetPaymentTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentTypes", reflect.TypeOf((*MockScores)(nil).GetPaymentTypes))
}

// GetPaymentsToScore mocks base method.
func (m *MockScores) GetPaymentsToScore(arg0 []models.ScorePaymentTypes, arg1 time.Time) ([]models.PaymentData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentsToScore", arg0, arg1)
	ret0, _ := ret[0].([]models.PaymentData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsToScore indicates an expected call of GetPaymentsToScore.
func (mr *MockScoresMockRecorder) GetPaymentsToScore(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsToScore", reflect.TypeOf((*MockScores)(nil).GetPaymentsToScore), arg0, arg1)
}

// GetScorePaymentTypeForPayment mocks base method.
func (m *MockScores) GetScorePaymentTypeForPayment(arg0 models.PaymentData, arg1 []models.ScorePaymentTypes) (*models.ScorePaymentTypes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScorePaymentTypeForPayment", arg0, arg1)
	ret0, _ := ret[0].(*models.ScorePaymentTypes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScorePaymentTypeForPayment indicates an expected call of GetScorePaymentTypeForPayment.
func (mr *MockScoresMockRecorder) GetScorePaymentTypeForPayment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScorePaymentTypeForPayment", reflect.TypeOf((*MockScores)(nil).GetScorePaymentTypeForPayment), arg0, arg1)
}

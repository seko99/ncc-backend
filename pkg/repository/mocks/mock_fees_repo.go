// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: Fees)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	repository "code.evixo.ru/ncc/ncc-backend/pkg/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockFees is a mock of Fees interface.
type MockFees struct {
	ctrl     *gomock.Controller
	recorder *MockFeesMockRecorder
}

// MockFeesMockRecorder is the mock recorder for MockFees.
type MockFeesMockRecorder struct {
	mock *MockFees
}

// NewMockFees creates a new mock instance.
func NewMockFees(ctrl *gomock.Controller) *MockFees {
	mock := &MockFees{ctrl: ctrl}
	mock.recorder = &MockFeesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFees) EXPECT() *MockFeesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFees) Create(arg0 models.FeeLogData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFeesMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFees)(nil).Create), arg0)
}

// CreateBatch mocks base method.
func (m *MockFees) CreateBatch(arg0 []models.FeeLogData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockFeesMockRecorder) CreateBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockFees)(nil).CreateBatch), arg0)
}

// Get mocks base method.
func (m *MockFees) Get(arg0 repository.TimePeriod) ([]models.FeeLogData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]models.FeeLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFeesMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFees)(nil).Get), arg0)
}

// GetByCustomer mocks base method.
func (m *MockFees) GetByCustomer(arg0 string, arg1 repository.TimePeriod, arg2 ...int) ([]models.FeeLogData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByCustomer", varargs...)
	ret0, _ := ret[0].([]models.FeeLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomer indicates an expected call of GetByCustomer.
func (mr *MockFeesMockRecorder) GetByCustomer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomer", reflect.TypeOf((*MockFees)(nil).GetByCustomer), varargs...)
}

// GetProcessed mocks base method.
func (m *MockFees) GetProcessed(arg0 ...time.Time) ([]models.CustomerData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProcessed", varargs...)
	ret0, _ := ret[0].([]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessed indicates an expected call of GetProcessed.
func (mr *MockFeesMockRecorder) GetProcessed(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessed", reflect.TypeOf((*MockFees)(nil).GetProcessed), arg0...)
}

// GetProcessedMap mocks base method.
func (m *MockFees) GetProcessedMap(arg0 ...time.Time) (map[string]models.CustomerData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetProcessedMap", varargs...)
	ret0, _ := ret[0].(map[string]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProcessedMap indicates an expected call of GetProcessedMap.
func (mr *MockFeesMockRecorder) GetProcessedMap(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProcessedMap", reflect.TypeOf((*MockFees)(nil).GetProcessedMap), arg0...)
}

// Update mocks base method.
func (m *MockFees) Update(arg0 models.FeeLogData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFeesMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFees)(nil).Update), arg0)
}

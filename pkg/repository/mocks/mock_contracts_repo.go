// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: Contracts)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockContracts is a mock of Contracts interface.
type MockContracts struct {
	ctrl     *gomock.Controller
	recorder *MockContractsMockRecorder
}

// MockContractsMockRecorder is the mock recorder for MockContracts.
type MockContractsMockRecorder struct {
	mock *MockContracts
}

// NewMockContracts creates a new mock instance.
func NewMockContracts(ctrl *gomock.Controller) *MockContracts {
	mock := &MockContracts{ctrl: ctrl}
	mock.recorder = &MockContractsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContracts) EXPECT() *MockContractsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockContracts) Create(arg0 models.ContractData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockContractsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContracts)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockContracts) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockContractsMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockContracts)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockContracts) Get() ([]models.ContractData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.ContractData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockContractsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockContracts)(nil).Get))
}

// Update mocks base method.
func (m *MockContracts) Update(arg0 models.ContractData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockContractsMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockContracts)(nil).Update), arg0)
}

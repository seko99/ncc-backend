// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: Informings)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInformings is a mock of Informings interface.
type MockInformings struct {
	ctrl     *gomock.Controller
	recorder *MockInformingsMockRecorder
}

// MockInformingsMockRecorder is the mock recorder for MockInformings.
type MockInformingsMockRecorder struct {
	mock *MockInformings
}

// NewMockInformings creates a new mock instance.
func NewMockInformings(ctrl *gomock.Controller) *MockInformings {
	mock := &MockInformings{ctrl: ctrl}
	mock.recorder = &MockInformingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformings) EXPECT() *MockInformingsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInformings) Create(arg0 models.InformingData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInformingsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInformings)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockInformings) Get() ([]models.InformingData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.InformingData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInformingsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInformings)(nil).Get))
}

// GetEnabled mocks base method.
func (m *MockInformings) GetEnabled() ([]models.InformingData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled")
	ret0, _ := ret[0].([]models.InformingData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnabled indicates an expected call of GetEnabled.
func (mr *MockInformingsMockRecorder) GetEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockInformings)(nil).GetEnabled))
}

// SetStart mocks base method.
func (m *MockInformings) SetStart(arg0 models.InformingData, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStart indicates an expected call of SetStart.
func (mr *MockInformingsMockRecorder) SetStart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStart", reflect.TypeOf((*MockInformings)(nil).SetStart), arg0, arg1)
}

// SetState mocks base method.
func (m *MockInformings) SetState(arg0 models.InformingData, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockInformingsMockRecorder) SetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockInformings)(nil).SetState), arg0, arg1)
}

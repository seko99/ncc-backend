// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: SormCustomerServicesErrors)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSormCustomerServicesErrors is a mock of SormCustomerServicesErrors interface.
type MockSormCustomerServicesErrors struct {
	ctrl     *gomock.Controller
	recorder *MockSormCustomerServicesErrorsMockRecorder
}

// MockSormCustomerServicesErrorsMockRecorder is the mock recorder for MockSormCustomerServicesErrors.
type MockSormCustomerServicesErrorsMockRecorder struct {
	mock *MockSormCustomerServicesErrors
}

// NewMockSormCustomerServicesErrors creates a new mock instance.
func NewMockSormCustomerServicesErrors(ctrl *gomock.Controller) *MockSormCustomerServicesErrors {
	mock := &MockSormCustomerServicesErrors{ctrl: ctrl}
	mock.recorder = &MockSormCustomerServicesErrorsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSormCustomerServicesErrors) EXPECT() *MockSormCustomerServicesErrorsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSormCustomerServicesErrors) Create(arg0 []models.SormCustomerServicesErrorsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSormCustomerServicesErrorsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSormCustomerServicesErrors)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSormCustomerServicesErrors) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSormCustomerServicesErrorsMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSormCustomerServicesErrors)(nil).Delete), arg0)
}

// DeleteAll mocks base method.
func (m *MockSormCustomerServicesErrors) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSormCustomerServicesErrorsMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSormCustomerServicesErrors)(nil).DeleteAll))
}

// Get mocks base method.
func (m *MockSormCustomerServicesErrors) Get() ([]models.SormCustomerServicesErrorsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.SormCustomerServicesErrorsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSormCustomerServicesErrorsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSormCustomerServicesErrors)(nil).Get))
}

// Update mocks base method.
func (m *MockSormCustomerServicesErrors) Update(arg0 models.SormCustomerServicesErrorsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSormCustomerServicesErrorsMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSormCustomerServicesErrors)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockSormCustomerServicesErrors) Upsert(arg0 []models.SormCustomerServicesErrorsData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSormCustomerServicesErrorsMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSormCustomerServicesErrors)(nil).Upsert), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: ServiceInternet)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceInternet is a mock of ServiceInternet interface.
type MockServiceInternet struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInternetMockRecorder
}

// MockServiceInternetMockRecorder is the mock recorder for MockServiceInternet.
type MockServiceInternetMockRecorder struct {
	mock *MockServiceInternet
}

// NewMockServiceInternet creates a new mock instance.
func NewMockServiceInternet(ctrl *gomock.Controller) *MockServiceInternet {
	mock := &MockServiceInternet{ctrl: ctrl}
	mock.recorder = &MockServiceInternetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInternet) EXPECT() *MockServiceInternetMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceInternet) Create(arg0 models.ServiceInternetData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceInternetMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceInternet)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockServiceInternet) Get() ([]models.ServiceInternetData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.ServiceInternetData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceInternetMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceInternet)(nil).Get))
}

// GetById mocks base method.
func (m *MockServiceInternet) GetById(arg0 string) (*models.ServiceInternetData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(*models.ServiceInternetData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockServiceInternetMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockServiceInternet)(nil).GetById), arg0)
}

// GetCustomDataByCustomer mocks base method.
func (m *MockServiceInternet) GetCustomDataByCustomer(arg0 models.CustomerData) (*models.ServiceInternetCustomData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomDataByCustomer", arg0)
	ret0, _ := ret[0].(*models.ServiceInternetCustomData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomDataByCustomer indicates an expected call of GetCustomDataByCustomer.
func (mr *MockServiceInternetMockRecorder) GetCustomDataByCustomer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomDataByCustomer", reflect.TypeOf((*MockServiceInternet)(nil).GetCustomDataByCustomer), arg0)
}

// GetCustomDataMap mocks base method.
func (m *MockServiceInternet) GetCustomDataMap() (map[string]models.ServiceInternetCustomData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomDataMap")
	ret0, _ := ret[0].(map[string]models.ServiceInternetCustomData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomDataMap indicates an expected call of GetCustomDataMap.
func (mr *MockServiceInternetMockRecorder) GetCustomDataMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomDataMap", reflect.TypeOf((*MockServiceInternet)(nil).GetCustomDataMap))
}

// Upsert mocks base method.
func (m *MockServiceInternet) Upsert(arg0 models.ServiceInternetData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServiceInternetMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServiceInternet)(nil).Upsert), arg0)
}

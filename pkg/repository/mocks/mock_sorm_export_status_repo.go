// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: SormExportStatus)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSormExportStatus is a mock of SormExportStatus interface.
type MockSormExportStatus struct {
	ctrl     *gomock.Controller
	recorder *MockSormExportStatusMockRecorder
}

// MockSormExportStatusMockRecorder is the mock recorder for MockSormExportStatus.
type MockSormExportStatusMockRecorder struct {
	mock *MockSormExportStatus
}

// NewMockSormExportStatus creates a new mock instance.
func NewMockSormExportStatus(ctrl *gomock.Controller) *MockSormExportStatus {
	mock := &MockSormExportStatus{ctrl: ctrl}
	mock.recorder = &MockSormExportStatusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSormExportStatus) EXPECT() *MockSormExportStatusMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSormExportStatus) Create(arg0 models.SormExportStatusData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSormExportStatusMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSormExportStatus)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSormExportStatus) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSormExportStatusMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSormExportStatus)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockSormExportStatus) Get() ([]models.SormExportStatusData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.SormExportStatusData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSormExportStatusMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSormExportStatus)(nil).Get))
}

// GetByFileName mocks base method.
func (m *MockSormExportStatus) GetByFileName(arg0 string) (models.SormExportStatusData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFileName", arg0)
	ret0, _ := ret[0].(models.SormExportStatusData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFileName indicates an expected call of GetByFileName.
func (mr *MockSormExportStatusMockRecorder) GetByFileName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFileName", reflect.TypeOf((*MockSormExportStatus)(nil).GetByFileName), arg0)
}

// Update mocks base method.
func (m *MockSormExportStatus) Update(arg0 models.SormExportStatusData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSormExportStatusMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSormExportStatus)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockSormExportStatus) Upsert(arg0 models.SormExportStatusData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSormExportStatusMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSormExportStatus)(nil).Upsert), arg0)
}

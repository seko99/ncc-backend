// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: SessionsLog)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	repository "code.evixo.ru/ncc/ncc-backend/pkg/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionsLog is a mock of SessionsLog interface.
type MockSessionsLog struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsLogMockRecorder
}

// MockSessionsLogMockRecorder is the mock recorder for MockSessionsLog.
type MockSessionsLogMockRecorder struct {
	mock *MockSessionsLog
}

// NewMockSessionsLog creates a new mock instance.
func NewMockSessionsLog(ctrl *gomock.Controller) *MockSessionsLog {
	mock := &MockSessionsLog{ctrl: ctrl}
	mock.recorder = &MockSessionsLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionsLog) EXPECT() *MockSessionsLogMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionsLog) Create(arg0 models.SessionsLogData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionsLogMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionsLog)(nil).Create), arg0)
}

// DeleteById mocks base method.
func (m *MockSessionsLog) DeleteById(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockSessionsLogMockRecorder) DeleteById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockSessionsLog)(nil).DeleteById), arg0)
}

// GetByCustomer mocks base method.
func (m *MockSessionsLog) GetByCustomer(arg0 string, arg1 repository.TimePeriod, arg2 ...int) ([]models.SessionsLogData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByCustomer", varargs...)
	ret0, _ := ret[0].([]models.SessionsLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomer indicates an expected call of GetByCustomer.
func (mr *MockSessionsLogMockRecorder) GetByCustomer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomer", reflect.TypeOf((*MockSessionsLog)(nil).GetByCustomer), varargs...)
}

// GetBySessionId mocks base method.
func (m *MockSessionsLog) GetBySessionId(arg0 string) (models.SessionsLogData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySessionId", arg0)
	ret0, _ := ret[0].(models.SessionsLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySessionId indicates an expected call of GetBySessionId.
func (mr *MockSessionsLogMockRecorder) GetBySessionId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySessionId", reflect.TypeOf((*MockSessionsLog)(nil).GetBySessionId), arg0)
}

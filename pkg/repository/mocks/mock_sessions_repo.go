// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: Sessions)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	repository "code.evixo.ru/ncc/ncc-backend/pkg/repository"
	gomock "github.com/golang/mock/gomock"
)

// MockSessions is a mock of Sessions interface.
type MockSessions struct {
	ctrl     *gomock.Controller
	recorder *MockSessionsMockRecorder
}

// MockSessionsMockRecorder is the mock recorder for MockSessions.
type MockSessionsMockRecorder struct {
	mock *MockSessions
}

// NewMockSessions creates a new mock instance.
func NewMockSessions(ctrl *gomock.Controller) *MockSessions {
	mock := &MockSessions{ctrl: ctrl}
	mock.recorder = &MockSessionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessions) EXPECT() *MockSessionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessions) Create(arg0 []models.SessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSessionsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessions)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockSessions) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionsMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessions)(nil).Delete), arg0)
}

// DeleteAll mocks base method.
func (m *MockSessions) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockSessionsMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockSessions)(nil).DeleteAll))
}

// DeleteBySessionId mocks base method.
func (m *MockSessions) DeleteBySessionId(arg0 models.SessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBySessionId", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBySessionId indicates an expected call of DeleteBySessionId.
func (mr *MockSessionsMockRecorder) DeleteBySessionId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBySessionId", reflect.TypeOf((*MockSessions)(nil).DeleteBySessionId), arg0)
}

// Get mocks base method.
func (m *MockSessions) Get() ([]models.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessions)(nil).Get))
}

// GetByCustomer mocks base method.
func (m *MockSessions) GetByCustomer(arg0 string, arg1 repository.TimePeriod, arg2 ...int) ([]models.SessionData, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByCustomer", varargs...)
	ret0, _ := ret[0].([]models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCustomer indicates an expected call of GetByCustomer.
func (mr *MockSessionsMockRecorder) GetByCustomer(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCustomer", reflect.TypeOf((*MockSessions)(nil).GetByCustomer), varargs...)
}

// GetByIP mocks base method.
func (m *MockSessions) GetByIP(arg0 string) (models.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIP", arg0)
	ret0, _ := ret[0].(models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIP indicates an expected call of GetByIP.
func (mr *MockSessionsMockRecorder) GetByIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIP", reflect.TypeOf((*MockSessions)(nil).GetByIP), arg0)
}

// GetById mocks base method.
func (m *MockSessions) GetById(arg0 string) (models.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockSessionsMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockSessions)(nil).GetById), arg0)
}

// GetByLogin mocks base method.
func (m *MockSessions) GetByLogin(arg0 string) ([]models.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByLogin", arg0)
	ret0, _ := ret[0].([]models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByLogin indicates an expected call of GetByLogin.
func (mr *MockSessionsMockRecorder) GetByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByLogin", reflect.TypeOf((*MockSessions)(nil).GetByLogin), arg0)
}

// GetBySessionId mocks base method.
func (m *MockSessions) GetBySessionId(arg0 string) (models.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySessionId", arg0)
	ret0, _ := ret[0].(models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySessionId indicates an expected call of GetBySessionId.
func (mr *MockSessionsMockRecorder) GetBySessionId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySessionId", reflect.TypeOf((*MockSessions)(nil).GetBySessionId), arg0)
}

// Update mocks base method.
func (m *MockSessions) Update(arg0 models.SessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionsMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessions)(nil).Update), arg0)
}

// UpdateBySessionId mocks base method.
func (m *MockSessions) UpdateBySessionId(arg0 models.SessionData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBySessionId", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBySessionId indicates an expected call of UpdateBySessionId.
func (mr *MockSessionsMockRecorder) UpdateBySessionId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBySessionId", reflect.TypeOf((*MockSessions)(nil).UpdateBySessionId), arg0)
}

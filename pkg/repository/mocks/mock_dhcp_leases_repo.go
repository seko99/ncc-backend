// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: DhcpLeases)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDhcpLeases is a mock of DhcpLeases interface.
type MockDhcpLeases struct {
	ctrl     *gomock.Controller
	recorder *MockDhcpLeasesMockRecorder
}

// MockDhcpLeasesMockRecorder is the mock recorder for MockDhcpLeases.
type MockDhcpLeasesMockRecorder struct {
	mock *MockDhcpLeases
}

// NewMockDhcpLeases creates a new mock instance.
func NewMockDhcpLeases(ctrl *gomock.Controller) *MockDhcpLeases {
	mock := &MockDhcpLeases{ctrl: ctrl}
	mock.recorder = &MockDhcpLeasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDhcpLeases) EXPECT() *MockDhcpLeasesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDhcpLeases) Create(arg0 models.LeaseData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDhcpLeasesMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDhcpLeases)(nil).Create), arg0)
}

// DeleteAll mocks base method.
func (m *MockDhcpLeases) DeleteAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockDhcpLeasesMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockDhcpLeases)(nil).DeleteAll))
}

// Get mocks base method.
func (m *MockDhcpLeases) Get() ([]models.LeaseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.LeaseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDhcpLeasesMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDhcpLeases)(nil).Get))
}

// GetByIP mocks base method.
func (m *MockDhcpLeases) GetByIP(arg0 string) (models.LeaseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIP", arg0)
	ret0, _ := ret[0].(models.LeaseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIP indicates an expected call of GetByIP.
func (mr *MockDhcpLeasesMockRecorder) GetByIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIP", reflect.TypeOf((*MockDhcpLeases)(nil).GetByIP), arg0)
}

// Update mocks base method.
func (m *MockDhcpLeases) Update(arg0 models.LeaseData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDhcpLeasesMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDhcpLeases)(nil).Update), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: CustomerGroups)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerGroups is a mock of CustomerGroups interface.
type MockCustomerGroups struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerGroupsMockRecorder
}

// MockCustomerGroupsMockRecorder is the mock recorder for MockCustomerGroups.
type MockCustomerGroupsMockRecorder struct {
	mock *MockCustomerGroups
}

// NewMockCustomerGroups creates a new mock instance.
func NewMockCustomerGroups(ctrl *gomock.Controller) *MockCustomerGroups {
	mock := &MockCustomerGroups{ctrl: ctrl}
	mock.recorder = &MockCustomerGroupsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerGroups) EXPECT() *MockCustomerGroupsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerGroups) Create(arg0 models.CustomerGroupData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCustomerGroupsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerGroups)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *MockCustomerGroups) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCustomerGroupsMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCustomerGroups)(nil).Delete), arg0)
}

// Get mocks base method.
func (m *MockCustomerGroups) Get() ([]models.CustomerGroupData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.CustomerGroupData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomerGroupsMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomerGroups)(nil).Get))
}

// Update mocks base method.
func (m *MockCustomerGroups) Update(arg0 models.CustomerGroupData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerGroupsMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerGroups)(nil).Update), arg0)
}

// Upsert mocks base method.
func (m *MockCustomerGroups) Upsert(arg0 models.CustomerGroupData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockCustomerGroupsMockRecorder) Upsert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockCustomerGroups)(nil).Upsert), arg0)
}

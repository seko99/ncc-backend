// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/repository (interfaces: InformingLog)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockInformingLog is a mock of InformingLog interface.
type MockInformingLog struct {
	ctrl     *gomock.Controller
	recorder *MockInformingLogMockRecorder
}

// MockInformingLogMockRecorder is the mock recorder for MockInformingLog.
type MockInformingLogMockRecorder struct {
	mock *MockInformingLog
}

// NewMockInformingLog creates a new mock instance.
func NewMockInformingLog(ctrl *gomock.Controller) *MockInformingLog {
	mock := &MockInformingLog{ctrl: ctrl}
	mock.recorder = &MockInformingLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformingLog) EXPECT() *MockInformingLogMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInformingLog) Create(arg0 []models.InformingLogData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockInformingLogMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInformingLog)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockInformingLog) Get() ([]models.InformingLogData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].([]models.InformingLogData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInformingLogMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInformingLog)(nil).Get))
}

// SetStatus mocks base method.
func (m *MockInformingLog) SetStatus(arg0 models.InformingLogData, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockInformingLogMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockInformingLog)(nil).SetStatus), arg0, arg1)
}

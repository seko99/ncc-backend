// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/providers (interfaces: SmsProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockSmsProvider is a mock of SmsProvider interface.
type MockSmsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSmsProviderMockRecorder
}

// MockSmsProviderMockRecorder is the mock recorder for MockSmsProvider.
type MockSmsProviderMockRecorder struct {
	mock *MockSmsProvider
}

// NewMockSmsProvider creates a new mock instance.
func NewMockSmsProvider(ctrl *gomock.Controller) *MockSmsProvider {
	mock := &MockSmsProvider{ctrl: ctrl}
	mock.recorder = &MockSmsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmsProvider) EXPECT() *MockSmsProviderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockSmsProvider) Send(arg0 time.Time, arg1 []string, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockSmsProviderMockRecorder) Send(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockSmsProvider)(nil).Send), arg0, arg1, arg2)
}

// SendOne mocks base method.
func (m *MockSmsProvider) SendOne(arg0 time.Time, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOne", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOne indicates an expected call of SendOne.
func (mr *MockSmsProviderMockRecorder) SendOne(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOne", reflect.TypeOf((*MockSmsProvider)(nil).SendOne), arg0, arg1, arg2)
}

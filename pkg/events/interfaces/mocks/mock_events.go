// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/pkg/events/interfaces (interfaces: Events)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "code.evixo.ru/ncc/ncc-backend/pkg/events"
	gomock "github.com/golang/mock/gomock"
)

// MockEvents is a mock of Events interface.
type MockEvents struct {
	ctrl     *gomock.Controller
	recorder *MockEventsMockRecorder
}

// MockEventsMockRecorder is the mock recorder for MockEvents.
type MockEventsMockRecorder struct {
	mock *MockEvents
}

// NewMockEvents creates a new mock instance.
func NewMockEvents(ctrl *gomock.Controller) *MockEvents {
	mock := &MockEvents{ctrl: ctrl}
	mock.recorder = &MockEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvents) EXPECT() *MockEventsMockRecorder {
	return m.recorder
}

// PublishEvent mocks base method.
func (m *MockEvents) PublishEvent(arg0 events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishEvent indicates an expected call of PublishEvent.
func (mr *MockEventsMockRecorder) PublishEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishEvent", reflect.TypeOf((*MockEvents)(nil).PublishEvent), arg0)
}

// PublishProtoEvent mocks base method.
func (m *MockEvents) PublishProtoEvent(arg0 events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishProtoEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishProtoEvent indicates an expected call of PublishProtoEvent.
func (mr *MockEventsMockRecorder) PublishProtoEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishProtoEvent", reflect.TypeOf((*MockEvents)(nil).PublishProtoEvent), arg0)
}

// PublishRequest mocks base method.
func (m *MockEvents) PublishRequest(arg0 events.Event, arg1 string, arg2 func(events.Event, ...interface{}), arg3 ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PublishRequest", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishRequest indicates an expected call of PublishRequest.
func (mr *MockEventsMockRecorder) PublishRequest(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishRequest", reflect.TypeOf((*MockEvents)(nil).PublishRequest), varargs...)
}

// Run mocks base method.
func (m *MockEvents) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockEventsMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockEvents)(nil).Run))
}

// SubscribeOnBroadcast mocks base method.
func (m *MockEvents) SubscribeOnBroadcast(arg0 string, arg1 func(events.Event)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnBroadcast", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeOnBroadcast indicates an expected call of SubscribeOnBroadcast.
func (mr *MockEventsMockRecorder) SubscribeOnBroadcast(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnBroadcast", reflect.TypeOf((*MockEvents)(nil).SubscribeOnBroadcast), arg0, arg1)
}

// SubscribeOnEvent mocks base method.
func (m *MockEvents) SubscribeOnEvent(arg0 string, arg1 func(events.Event)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeOnEvent indicates an expected call of SubscribeOnEvent.
func (mr *MockEventsMockRecorder) SubscribeOnEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnEvent", reflect.TypeOf((*MockEvents)(nil).SubscribeOnEvent), arg0, arg1)
}

// SubscribeOnProtoEvent mocks base method.
func (m *MockEvents) SubscribeOnProtoEvent(arg0 string, arg1 func(events.Event)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnProtoEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeOnProtoEvent indicates an expected call of SubscribeOnProtoEvent.
func (mr *MockEventsMockRecorder) SubscribeOnProtoEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnProtoEvent", reflect.TypeOf((*MockEvents)(nil).SubscribeOnProtoEvent), arg0, arg1)
}

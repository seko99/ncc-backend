// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/simulator/interfaces (interfaces: RadiusStartAllUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "code.evixo.ru/ncc/ncc-backend/services/simulator/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockRadiusStartAllUsecase is a mock of RadiusStartAllUsecase interface.
type MockRadiusStartAllUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRadiusStartAllUsecaseMockRecorder
}

// MockRadiusStartAllUsecaseMockRecorder is the mock recorder for MockRadiusStartAllUsecase.
type MockRadiusStartAllUsecaseMockRecorder struct {
	mock *MockRadiusStartAllUsecase
}

// NewMockRadiusStartAllUsecase creates a new mock instance.
func NewMockRadiusStartAllUsecase(ctrl *gomock.Controller) *MockRadiusStartAllUsecase {
	mock := &MockRadiusStartAllUsecase{ctrl: ctrl}
	mock.recorder = &MockRadiusStartAllUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadiusStartAllUsecase) EXPECT() *MockRadiusStartAllUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRadiusStartAllUsecase) Execute(arg0 dto.RadiusUsecaseRequest) (dto.RadiusUsecaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(dto.RadiusUsecaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRadiusStartAllUsecaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRadiusStartAllUsecase)(nil).Execute), arg0)
}

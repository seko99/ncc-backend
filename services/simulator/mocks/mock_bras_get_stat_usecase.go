// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/simulator/interfaces (interfaces: BrasGetStatUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "code.evixo.ru/ncc/ncc-backend/services/simulator/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockBrasGetStatUsecase is a mock of BrasGetStatUsecase interface.
type MockBrasGetStatUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBrasGetStatUsecaseMockRecorder
}

// MockBrasGetStatUsecaseMockRecorder is the mock recorder for MockBrasGetStatUsecase.
type MockBrasGetStatUsecaseMockRecorder struct {
	mock *MockBrasGetStatUsecase
}

// NewMockBrasGetStatUsecase creates a new mock instance.
func NewMockBrasGetStatUsecase(ctrl *gomock.Controller) *MockBrasGetStatUsecase {
	mock := &MockBrasGetStatUsecase{ctrl: ctrl}
	mock.recorder = &MockBrasGetStatUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrasGetStatUsecase) EXPECT() *MockBrasGetStatUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockBrasGetStatUsecase) Execute(arg0 dto.BrasGetStatUsecaseRequest) (dto.BrasGetStatUsecaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(dto.BrasGetStatUsecaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockBrasGetStatUsecaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockBrasGetStatUsecase)(nil).Execute), arg0)
}

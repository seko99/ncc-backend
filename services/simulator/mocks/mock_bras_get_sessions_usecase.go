// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/simulator/interfaces (interfaces: BrasGetSessionsUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "code.evixo.ru/ncc/ncc-backend/services/simulator/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockBrasGetSessionsUsecase is a mock of BrasGetSessionsUsecase interface.
type MockBrasGetSessionsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockBrasGetSessionsUsecaseMockRecorder
}

// MockBrasGetSessionsUsecaseMockRecorder is the mock recorder for MockBrasGetSessionsUsecase.
type MockBrasGetSessionsUsecaseMockRecorder struct {
	mock *MockBrasGetSessionsUsecase
}

// NewMockBrasGetSessionsUsecase creates a new mock instance.
func NewMockBrasGetSessionsUsecase(ctrl *gomock.Controller) *MockBrasGetSessionsUsecase {
	mock := &MockBrasGetSessionsUsecase{ctrl: ctrl}
	mock.recorder = &MockBrasGetSessionsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrasGetSessionsUsecase) EXPECT() *MockBrasGetSessionsUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockBrasGetSessionsUsecase) Execute(arg0 dto.BrasGetSessionsUsecaseRequest) (dto.BrasGetSessionsUsecaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(dto.BrasGetSessionsUsecaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockBrasGetSessionsUsecaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockBrasGetSessionsUsecase)(nil).Execute), arg0)
}

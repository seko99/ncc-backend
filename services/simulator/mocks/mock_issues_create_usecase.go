// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/simulator/interfaces (interfaces: IssuesCreateUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIssuesCreateUsecase is a mock of IssuesCreateUsecase interface.
type MockIssuesCreateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIssuesCreateUsecaseMockRecorder
}

// MockIssuesCreateUsecaseMockRecorder is the mock recorder for MockIssuesCreateUsecase.
type MockIssuesCreateUsecaseMockRecorder struct {
	mock *MockIssuesCreateUsecase
}

// NewMockIssuesCreateUsecase creates a new mock instance.
func NewMockIssuesCreateUsecase(ctrl *gomock.Controller) *MockIssuesCreateUsecase {
	mock := &MockIssuesCreateUsecase{ctrl: ctrl}
	mock.recorder = &MockIssuesCreateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuesCreateUsecase) EXPECT() *MockIssuesCreateUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIssuesCreateUsecase) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockIssuesCreateUsecaseMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIssuesCreateUsecase)(nil).Execute))
}

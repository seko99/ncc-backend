// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/simulator/interfaces (interfaces: Simulator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	simulator "code.evixo.ru/ncc/ncc-backend/services/simulator"
	dto "code.evixo.ru/ncc/ncc-backend/services/simulator/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockSimulator is a mock of Simulator interface.
type MockSimulator struct {
	ctrl     *gomock.Controller
	recorder *MockSimulatorMockRecorder
}

// MockSimulatorMockRecorder is the mock recorder for MockSimulator.
type MockSimulatorMockRecorder struct {
	mock *MockSimulator
}

// NewMockSimulator creates a new mock instance.
func NewMockSimulator(ctrl *gomock.Controller) *MockSimulator {
	mock := &MockSimulator{ctrl: ctrl}
	mock.recorder = &MockSimulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimulator) EXPECT() *MockSimulatorMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockSimulator) Cleanup() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockSimulatorMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockSimulator)(nil).Cleanup))
}

// ClearFakeData mocks base method.
func (m *MockSimulator) ClearFakeData(arg0 dto.FakeDataClearUsecaseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearFakeData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearFakeData indicates an expected call of ClearFakeData.
func (mr *MockSimulatorMockRecorder) ClearFakeData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearFakeData", reflect.TypeOf((*MockSimulator)(nil).ClearFakeData), arg0)
}

// CreateFakeData mocks base method.
func (m *MockSimulator) CreateFakeData(arg0 dto.FakeDataCreateUsecaseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFakeData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFakeData indicates an expected call of CreateFakeData.
func (mr *MockSimulatorMockRecorder) CreateFakeData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFakeData", reflect.TypeOf((*MockSimulator)(nil).CreateFakeData), arg0)
}

// CreateIssues mocks base method.
func (m *MockSimulator) CreateIssues() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssues")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIssues indicates an expected call of CreateIssues.
func (mr *MockSimulatorMockRecorder) CreateIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssues", reflect.TypeOf((*MockSimulator)(nil).CreateIssues))
}

// DeleteIssues mocks base method.
func (m *MockSimulator) DeleteIssues() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIssues")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIssues indicates an expected call of DeleteIssues.
func (mr *MockSimulatorMockRecorder) DeleteIssues() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIssues", reflect.TypeOf((*MockSimulator)(nil).DeleteIssues))
}

// DropSessions mocks base method.
func (m *MockSimulator) DropSessions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DropSessions")
	ret0, _ := ret[0].(error)
	return ret0
}

// DropSessions indicates an expected call of DropSessions.
func (mr *MockSimulatorMockRecorder) DropSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropSessions", reflect.TypeOf((*MockSimulator)(nil).DropSessions))
}

// GetCustomerCache mocks base method.
func (m *MockSimulator) GetCustomerCache() ([]models.CustomerData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerCache")
	ret0, _ := ret[0].([]models.CustomerData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerCache indicates an expected call of GetCustomerCache.
func (mr *MockSimulatorMockRecorder) GetCustomerCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerCache", reflect.TypeOf((*MockSimulator)(nil).GetCustomerCache))
}

// GetLeasesCache mocks base method.
func (m *MockSimulator) GetLeasesCache() ([]models.LeaseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLeasesCache")
	ret0, _ := ret[0].([]models.LeaseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLeasesCache indicates an expected call of GetLeasesCache.
func (mr *MockSimulatorMockRecorder) GetLeasesCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLeasesCache", reflect.TypeOf((*MockSimulator)(nil).GetLeasesCache))
}

// GetNASCache mocks base method.
func (m *MockSimulator) GetNASCache() ([]models.NasData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNASCache")
	ret0, _ := ret[0].([]models.NasData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNASCache indicates an expected call of GetNASCache.
func (mr *MockSimulatorMockRecorder) GetNASCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNASCache", reflect.TypeOf((*MockSimulator)(nil).GetNASCache))
}

// GetSessionCache mocks base method.
func (m *MockSimulator) GetSessionCache() ([]models.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionCache")
	ret0, _ := ret[0].([]models.SessionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionCache indicates an expected call of GetSessionCache.
func (mr *MockSimulatorMockRecorder) GetSessionCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionCache", reflect.TypeOf((*MockSimulator)(nil).GetSessionCache))
}

// InitDictionaries mocks base method.
func (m *MockSimulator) InitDictionaries() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDictionaries")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDictionaries indicates an expected call of InitDictionaries.
func (mr *MockSimulatorMockRecorder) InitDictionaries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDictionaries", reflect.TypeOf((*MockSimulator)(nil).InitDictionaries))
}

// KillRadiusSessions mocks base method.
func (m *MockSimulator) KillRadiusSessions(arg0 dto.RadiusKillSessionsUsecaseRequest) (dto.RadiusKillSessionsUsecaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillRadiusSessions", arg0)
	ret0, _ := ret[0].(dto.RadiusKillSessionsUsecaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KillRadiusSessions indicates an expected call of KillRadiusSessions.
func (mr *MockSimulatorMockRecorder) KillRadiusSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillRadiusSessions", reflect.TypeOf((*MockSimulator)(nil).KillRadiusSessions), arg0)
}

// SetBRASParams mocks base method.
func (m *MockSimulator) SetBRASParams(arg0 simulator.BrasParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBRASParams", arg0)
}

// SetBRASParams indicates an expected call of SetBRASParams.
func (mr *MockSimulatorMockRecorder) SetBRASParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBRASParams", reflect.TypeOf((*MockSimulator)(nil).SetBRASParams), arg0)
}

// StartRadiusSessions mocks base method.
func (m *MockSimulator) StartRadiusSessions(arg0 dto.RadiusUsecaseRequest) (dto.RadiusUsecaseResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartRadiusSessions", arg0)
	ret0, _ := ret[0].(dto.RadiusUsecaseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartRadiusSessions indicates an expected call of StartRadiusSessions.
func (mr *MockSimulatorMockRecorder) StartRadiusSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRadiusSessions", reflect.TypeOf((*MockSimulator)(nil).StartRadiusSessions), arg0)
}

// StopRadiusSessions mocks base method.
func (m *MockSimulator) StopRadiusSessions(arg0 dto.RadiusUsecaseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopRadiusSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopRadiusSessions indicates an expected call of StopRadiusSessions.
func (mr *MockSimulatorMockRecorder) StopRadiusSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRadiusSessions", reflect.TypeOf((*MockSimulator)(nil).StopRadiusSessions), arg0)
}

// UpdateLeases mocks base method.
func (m *MockSimulator) UpdateLeases() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLeases")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLeases indicates an expected call of UpdateLeases.
func (mr *MockSimulatorMockRecorder) UpdateLeases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLeases", reflect.TypeOf((*MockSimulator)(nil).UpdateLeases))
}

// UpdateMap mocks base method.
func (m *MockSimulator) UpdateMap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMap")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMap indicates an expected call of UpdateMap.
func (mr *MockSimulatorMockRecorder) UpdateMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMap", reflect.TypeOf((*MockSimulator)(nil).UpdateMap))
}

// UpdateRadiusSessions mocks base method.
func (m *MockSimulator) UpdateRadiusSessions(arg0 dto.RadiusUsecaseRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRadiusSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRadiusSessions indicates an expected call of UpdateRadiusSessions.
func (mr *MockSimulatorMockRecorder) UpdateRadiusSessions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRadiusSessions", reflect.TypeOf((*MockSimulator)(nil).UpdateRadiusSessions), arg0)
}

// UpdateSessions mocks base method.
func (m *MockSimulator) UpdateSessions() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSessions")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSessions indicates an expected call of UpdateSessions.
func (mr *MockSimulatorMockRecorder) UpdateSessions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSessions", reflect.TypeOf((*MockSimulator)(nil).UpdateSessions))
}

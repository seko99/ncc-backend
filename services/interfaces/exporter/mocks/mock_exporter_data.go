// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/interfaces/exporter (interfaces: ExportData)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	exporter "code.evixo.ru/ncc/ncc-backend/services/interfaces/exporter"
	gomock "github.com/golang/mock/gomock"
)

// MockExportData is a mock of ExportData interface.
type MockExportData struct {
	ctrl     *gomock.Controller
	recorder *MockExportDataMockRecorder
}

// MockExportDataMockRecorder is the mock recorder for MockExportData.
type MockExportDataMockRecorder struct {
	mock *MockExportData
}

// NewMockExportData creates a new mock instance.
func NewMockExportData(ctrl *gomock.Controller) *MockExportData {
	mock := &MockExportData{ctrl: ctrl}
	mock.recorder = &MockExportDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportData) EXPECT() *MockExportDataMockRecorder {
	return m.recorder
}

// FileName mocks base method.
func (m *MockExportData) FileName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileName")
	ret0, _ := ret[0].(string)
	return ret0
}

// FileName indicates an expected call of FileName.
func (mr *MockExportDataMockRecorder) FileName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileName", reflect.TypeOf((*MockExportData)(nil).FileName))
}

// FromSlice mocks base method.
func (m *MockExportData) FromSlice(arg0 []string) (exporter.ExportData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromSlice", arg0)
	ret0, _ := ret[0].(exporter.ExportData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromSlice indicates an expected call of FromSlice.
func (mr *MockExportDataMockRecorder) FromSlice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromSlice", reflect.TypeOf((*MockExportData)(nil).FromSlice), arg0)
}

// Header mocks base method.
func (m *MockExportData) Header() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Header indicates an expected call of Header.
func (mr *MockExportDataMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockExportData)(nil).Header))
}

// ToSlice mocks base method.
func (m *MockExportData) ToSlice() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSlice")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ToSlice indicates an expected call of ToSlice.
func (mr *MockExportDataMockRecorder) ToSlice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSlice", reflect.TypeOf((*MockExportData)(nil).ToSlice))
}

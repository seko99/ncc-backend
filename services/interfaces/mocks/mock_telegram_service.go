// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/interfaces (interfaces: Telegram)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTelegram is a mock of Telegram interface.
type MockTelegram struct {
	ctrl     *gomock.Controller
	recorder *MockTelegramMockRecorder
}

// MockTelegramMockRecorder is the mock recorder for MockTelegram.
type MockTelegramMockRecorder struct {
	mock *MockTelegram
}

// NewMockTelegram creates a new mock instance.
func NewMockTelegram(ctrl *gomock.Controller) *MockTelegram {
	mock := &MockTelegram{ctrl: ctrl}
	mock.recorder = &MockTelegramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelegram) EXPECT() *MockTelegramMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockTelegram) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockTelegramMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockTelegram)(nil).Connect))
}

// Send mocks base method.
func (m *MockTelegram) Send(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTelegramMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTelegram)(nil).Send), arg0, arg1)
}

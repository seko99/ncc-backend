// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/interfaces (interfaces: Informings)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	informings "code.evixo.ru/ncc/ncc-backend/services/informings"
	gomock "github.com/golang/mock/gomock"
)

// MockInformings is a mock of Informings interface.
type MockInformings struct {
	ctrl     *gomock.Controller
	recorder *MockInformingsMockRecorder
}

// MockInformingsMockRecorder is the mock recorder for MockInformings.
type MockInformingsMockRecorder struct {
	mock *MockInformings
}

// NewMockInformings creates a new mock instance.
func NewMockInformings(ctrl *gomock.Controller) *MockInformings {
	mock := &MockInformings{ctrl: ctrl}
	mock.recorder = &MockInformingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInformings) EXPECT() *MockInformingsMockRecorder {
	return m.recorder
}

// CheckConditions mocks base method.
func (m *MockInformings) CheckConditions(arg0 models.CustomerData, arg1 []models.InformingConditionData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConditions", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckConditions indicates an expected call of CheckConditions.
func (mr *MockInformingsMockRecorder) CheckConditions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConditions", reflect.TypeOf((*MockInformings)(nil).CheckConditions), arg0, arg1)
}

// PrepareMessageList mocks base method.
func (m *MockInformings) PrepareMessageList() ([]informings.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareMessageList")
	ret0, _ := ret[0].([]informings.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareMessageList indicates an expected call of PrepareMessageList.
func (mr *MockInformingsMockRecorder) PrepareMessageList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareMessageList", reflect.TypeOf((*MockInformings)(nil).PrepareMessageList))
}

// Replacer mocks base method.
func (m *MockInformings) Replacer(arg0 string, arg1 map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replacer", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replacer indicates an expected call of Replacer.
func (mr *MockInformingsMockRecorder) Replacer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replacer", reflect.TypeOf((*MockInformings)(nil).Replacer), arg0, arg1)
}

// Run mocks base method.
func (m *MockInformings) Run(arg0 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockInformingsMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockInformings)(nil).Run), arg0)
}

// SendMessages mocks base method.
func (m *MockInformings) SendMessages(arg0 []informings.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessages", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessages indicates an expected call of SendMessages.
func (mr *MockInformingsMockRecorder) SendMessages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessages", reflect.TypeOf((*MockInformings)(nil).SendMessages), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/interfaces (interfaces: FeesProcessor)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	domain "code.evixo.ru/ncc/ncc-backend/pkg/domain"
	models "code.evixo.ru/ncc/ncc-backend/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFeesProcessor is a mock of FeesProcessor interface.
type MockFeesProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockFeesProcessorMockRecorder
}

// MockFeesProcessorMockRecorder is the mock recorder for MockFeesProcessor.
type MockFeesProcessorMockRecorder struct {
	mock *MockFeesProcessor
}

// NewMockFeesProcessor creates a new mock instance.
func NewMockFeesProcessor(ctrl *gomock.Controller) *MockFeesProcessor {
	mock := &MockFeesProcessor{ctrl: ctrl}
	mock.recorder = &MockFeesProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeesProcessor) EXPECT() *MockFeesProcessorMockRecorder {
	return m.recorder
}

// CreateFee mocks base method.
func (m *MockFeesProcessor) CreateFee(arg0 models.CustomerData, arg1 []domain.FeeService, arg2 string, arg3 time.Time) (*domain.Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFee", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFee indicates an expected call of CreateFee.
func (mr *MockFeesProcessorMockRecorder) CreateFee(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFee", reflect.TypeOf((*MockFeesProcessor)(nil).CreateFee), arg0, arg1, arg2, arg3)
}

// DaysIn mocks base method.
func (m *MockFeesProcessor) DaysIn(arg0 time.Month, arg1 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DaysIn", arg0, arg1)
	ret0, _ := ret[0].(int)
	return ret0
}

// DaysIn indicates an expected call of DaysIn.
func (mr *MockFeesProcessorMockRecorder) DaysIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DaysIn", reflect.TypeOf((*MockFeesProcessor)(nil).DaysIn), arg0, arg1)
}

// Process mocks base method.
func (m *MockFeesProcessor) Process(arg0 []models.CustomerData, arg1 map[string]models.CustomerData, arg2 int, arg3 time.Time) (map[string]domain.Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]domain.Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockFeesProcessorMockRecorder) Process(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockFeesProcessor)(nil).Process), arg0, arg1, arg2, arg3)
}

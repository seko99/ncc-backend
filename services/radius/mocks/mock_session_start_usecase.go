// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/radius/interfaces (interfaces: SessionStartUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "code.evixo.ru/ncc/ncc-backend/services/radius/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionStartUsecase is a mock of SessionStartUsecase interface.
type MockSessionStartUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStartUsecaseMockRecorder
}

// MockSessionStartUsecaseMockRecorder is the mock recorder for MockSessionStartUsecase.
type MockSessionStartUsecaseMockRecorder struct {
	mock *MockSessionStartUsecase
}

// NewMockSessionStartUsecase creates a new mock instance.
func NewMockSessionStartUsecase(ctrl *gomock.Controller) *MockSessionStartUsecase {
	mock := &MockSessionStartUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionStartUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStartUsecase) EXPECT() *MockSessionStartUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSessionStartUsecase) Execute(arg0 dto.SessionStartRequest) (*dto.SessionStartResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*dto.SessionStartResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSessionStartUsecaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSessionStartUsecase)(nil).Execute), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/radius/interfaces (interfaces: SessionStopUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "code.evixo.ru/ncc/ncc-backend/services/radius/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionStopUsecase is a mock of SessionStopUsecase interface.
type MockSessionStopUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionStopUsecaseMockRecorder
}

// MockSessionStopUsecaseMockRecorder is the mock recorder for MockSessionStopUsecase.
type MockSessionStopUsecaseMockRecorder struct {
	mock *MockSessionStopUsecase
}

// NewMockSessionStopUsecase creates a new mock instance.
func NewMockSessionStopUsecase(ctrl *gomock.Controller) *MockSessionStopUsecase {
	mock := &MockSessionStopUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionStopUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionStopUsecase) EXPECT() *MockSessionStopUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSessionStopUsecase) Execute(arg0 dto.SessionStopRequest) (*dto.SessionStopResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*dto.SessionStopResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSessionStopUsecaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSessionStopUsecase)(nil).Execute), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/radius/interfaces (interfaces: SessionWatcherUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSessionWatcherUsecase is a mock of SessionWatcherUsecase interface.
type MockSessionWatcherUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionWatcherUsecaseMockRecorder
}

// MockSessionWatcherUsecaseMockRecorder is the mock recorder for MockSessionWatcherUsecase.
type MockSessionWatcherUsecaseMockRecorder struct {
	mock *MockSessionWatcherUsecase
}

// NewMockSessionWatcherUsecase creates a new mock instance.
func NewMockSessionWatcherUsecase(ctrl *gomock.Controller) *MockSessionWatcherUsecase {
	mock := &MockSessionWatcherUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionWatcherUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionWatcherUsecase) EXPECT() *MockSessionWatcherUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSessionWatcherUsecase) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockSessionWatcherUsecaseMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSessionWatcherUsecase)(nil).Execute))
}

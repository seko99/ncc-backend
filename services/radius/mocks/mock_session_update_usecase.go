// Code generated by MockGen. DO NOT EDIT.
// Source: code.evixo.ru/ncc/ncc-backend/services/radius/interfaces (interfaces: SessionUpdateUsecase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "code.evixo.ru/ncc/ncc-backend/services/radius/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionUpdateUsecase is a mock of SessionUpdateUsecase interface.
type MockSessionUpdateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionUpdateUsecaseMockRecorder
}

// MockSessionUpdateUsecaseMockRecorder is the mock recorder for MockSessionUpdateUsecase.
type MockSessionUpdateUsecaseMockRecorder struct {
	mock *MockSessionUpdateUsecase
}

// NewMockSessionUpdateUsecase creates a new mock instance.
func NewMockSessionUpdateUsecase(ctrl *gomock.Controller) *MockSessionUpdateUsecase {
	mock := &MockSessionUpdateUsecase{ctrl: ctrl}
	mock.recorder = &MockSessionUpdateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionUpdateUsecase) EXPECT() *MockSessionUpdateUsecaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockSessionUpdateUsecase) Execute(arg0 dto.SessionUpdateRequest) (*dto.SessionUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0)
	ret0, _ := ret[0].(*dto.SessionUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockSessionUpdateUsecaseMockRecorder) Execute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSessionUpdateUsecase)(nil).Execute), arg0)
}

// Code generated by "stringer -type=AttributeType"; DO NOT EDIT.

package radius

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UserName-1]
	_ = x[UserPassword-2]
	_ = x[CHAPPassword-3]
	_ = x[NASIPAddress-4]
	_ = x[NASPort-5]
	_ = x[ServiceType-6]
	_ = x[FramedProtocol-7]
	_ = x[FramedIPAddress-8]
	_ = x[FramedIPNetmask-9]
	_ = x[FramedRouting-10]
	_ = x[FilterId-11]
	_ = x[FramedMTU-12]
	_ = x[FramedCompression-13]
	_ = x[LoginIPHost-14]
	_ = x[LoginService-15]
	_ = x[LoginTCPPort-16]
	_ = x[ReplyMessage-18]
	_ = x[CallbackNumber-19]
	_ = x[CallbackId-20]
	_ = x[FramedRoute-22]
	_ = x[FramedIPXNetwork-23]
	_ = x[State-24]
	_ = x[Class-25]
	_ = x[VendorSpecific-26]
	_ = x[SessionTimeout-27]
	_ = x[IdleTimeout-28]
	_ = x[TerminationAction-29]
	_ = x[CalledStationId-30]
	_ = x[CallingStationId-31]
	_ = x[NASIdentifier-32]
	_ = x[ProxyState-33]
	_ = x[LoginLATService-34]
	_ = x[LoginLATNode-35]
	_ = x[LoginLATGroup-36]
	_ = x[FramedAppleTalkLink-37]
	_ = x[FramedAppleTalkNetwork-38]
	_ = x[FramedAppleTalkZone-39]
	_ = x[AcctStatusType-40]
	_ = x[AcctDelayTime-41]
	_ = x[AcctInputOctets-42]
	_ = x[AcctOutputOctets-43]
	_ = x[AcctSessionId-44]
	_ = x[AcctAuthentic-45]
	_ = x[AcctSessionTime-46]
	_ = x[AcctInputPackets-47]
	_ = x[AcctOutputPackets-48]
	_ = x[AcctTerminateCause-49]
	_ = x[AcctMultiSessionId-50]
	_ = x[AcctLinkCount-51]
	_ = x[AcctInputGigawords-52]
	_ = x[AcctOutputGigawords-53]
	_ = x[Unassigned1-54]
	_ = x[EventTimestamp-55]
	_ = x[EgressVLANID-56]
	_ = x[IngressFilters-57]
	_ = x[EgressVLANName-58]
	_ = x[UserPriorityTable-59]
	_ = x[CHAPChallenge-60]
	_ = x[NASPortType-61]
	_ = x[PortLimit-62]
	_ = x[LoginLATPort-63]
	_ = x[TunnelType-64]
	_ = x[TunnelMediumType-65]
	_ = x[TunnelClientEndpoint-66]
	_ = x[TunnelServerEndpoint-67]
	_ = x[AcctTunnelConnection-68]
	_ = x[TunnelPassword-69]
	_ = x[ARAPPassword-70]
	_ = x[ARAPFeatures-71]
	_ = x[ARAPZoneAccess-72]
	_ = x[ARAPSecurity-73]
	_ = x[ARAPSecurityData-74]
	_ = x[PasswordRetry-75]
	_ = x[Prompt-76]
	_ = x[ConnectInfo-77]
	_ = x[ConfigurationToken-78]
	_ = x[EAPMessage-79]
	_ = x[MessageAuthenticator-80]
	_ = x[TunnelPrivateGroupID-81]
	_ = x[TunnelAssignmentID-82]
	_ = x[TunnelPreference-83]
	_ = x[ARAPChallengeResponse-84]
	_ = x[AcctInterimInterval-85]
	_ = x[AcctTunnelPacketsLost-86]
	_ = x[NASPortId-87]
	_ = x[FramedPool-88]
	_ = x[CUI-89]
	_ = x[TunnelClientAuthID-90]
	_ = x[TunnelServerAuthID-91]
	_ = x[NASFilterRule-92]
	_ = x[Unassigned-93]
	_ = x[OriginatingLineInfo-94]
	_ = x[NASIPv6Address-95]
	_ = x[FramedInterfaceId-96]
	_ = x[FramedIPv6Prefix-97]
	_ = x[LoginIPv6Host-98]
	_ = x[FramedIPv6Route-99]
	_ = x[FramedIPv6Pool-100]
	_ = x[ErrorCause-101]
	_ = x[EAPKeyName-102]
	_ = x[DigestResponse-103]
	_ = x[DigestRealm-104]
	_ = x[DigestNonce-105]
	_ = x[DigestResponseAuth-106]
	_ = x[DigestNextnonce-107]
	_ = x[DigestMethod-108]
	_ = x[DigestURI-109]
	_ = x[DigestQop-110]
	_ = x[DigestAlgorithm-111]
	_ = x[DigestEntityBodyHash-112]
	_ = x[DigestCNonce-113]
	_ = x[DigestNonceCount-114]
	_ = x[DigestUsername-115]
	_ = x[DigestOpaque-116]
	_ = x[DigestAuthParam-117]
	_ = x[DigestAKAAuts-118]
	_ = x[DigestDomain-119]
	_ = x[DigestStale-120]
	_ = x[DigestHA1-121]
	_ = x[SIPAOR-122]
	_ = x[DelegatedIPv6Prefix-123]
	_ = x[MIP6FeatureVector-124]
	_ = x[MIP6HomeLinkPrefix-125]
	_ = x[OperatorName-126]
	_ = x[LocationInformation-127]
	_ = x[LocationData-128]
	_ = x[BasicLocationPolicyRules-129]
	_ = x[ExtendedLocationPolicyRules-130]
	_ = x[LocationCapable-131]
	_ = x[RequestedLocationInfo-132]
	_ = x[FramedManagementProtocol-133]
	_ = x[ManagementTransportProtectio-134]
	_ = x[ManagementPolicyId-135]
	_ = x[ManagementPrivilegeLevel-136]
	_ = x[PKMSSCert-137]
	_ = x[PKMCACert-138]
	_ = x[PKMConfigSettings-139]
	_ = x[PKMCryptosuiteList-140]
	_ = x[PKMSAID-141]
	_ = x[PKMSADescriptor-142]
	_ = x[PKMAuthKey-143]
	_ = x[DSLiteTunnelName-144]
	_ = x[MobileNodeIdentifier-145]
	_ = x[ServiceSelection-146]
	_ = x[PMIP6HomeLMAIPv6Address-147]
	_ = x[PMIP6VisitedLMAIPv6Address-148]
	_ = x[PMIP6HomeLMAIPv4Address-149]
	_ = x[PMIP6VisitedLMAIPv4Address-150]
	_ = x[PMIP6HomeHNPrefix-151]
	_ = x[PMIP6VisitedHNPrefix-152]
	_ = x[PMIP6HomeInterfaceID-153]
	_ = x[PMIP6VisitedInterfaceID-154]
	_ = x[PMIP6HomeIPv4HoA-155]
	_ = x[PMIP6VisitedIPv4HoA-156]
	_ = x[PMIP6HomeDHCP4ServerAddress-157]
	_ = x[PMIP6VisitedDHCP4ServerAddre-158]
	_ = x[PMIP6HomeDHCP6ServerAddress-159]
	_ = x[PMIP6VisitedDHCP6ServerAddre-160]
	_ = x[UnassignedStart-161]
	_ = x[UnassignedEnd-191]
	_ = x[ExperimentalStart-192]
	_ = x[ExperimentalEnd-223]
	_ = x[ImplementationSpecificStart-224]
	_ = x[ImplementationSpecificEnd-240]
	_ = x[ReservedStart-241]
	_ = x[ReservedEnd-254]
	_ = x[CiscoAVPair-1]
	_ = x[CiscoNASPort-2]
	_ = x[MSCHAPResponse-1]
	_ = x[MSCHAP2Response-25]
	_ = x[MSCHAPChallenge-11]
	_ = x[MSCHAPMPPEKeys-12]
	_ = x[MSMPPESendKey-16]
	_ = x[MSMPPERecvKey-17]
	_ = x[MSPrimaryDNSServer-28]
	_ = x[MSSecondaryDNSServer-29]
	_ = x[MikrotikRecvLimit-1]
	_ = x[MikrotikXmitLimit-2]
	_ = x[MikrotikGroup-3]
	_ = x[MikrotikWirelessForward-4]
	_ = x[MikrotikWirelessSkipDot1x-5]
	_ = x[MikrotikWirelessEncAlgo-6]
	_ = x[MikrotikWirelessEncKey-7]
	_ = x[MikrotikRateLimit-8]
	_ = x[MikrotikRealm-9]
	_ = x[MikrotikHostIP-10]
	_ = x[MikrotikMarkId-11]
	_ = x[MikrotikAdvertiseURL-12]
	_ = x[MikrotikAdvertiseInterval-13]
	_ = x[MikrotikRecvLimitGigawords-14]
	_ = x[MikrotikXmitLimitGigawords-15]
	_ = x[MikrotikWirelessPSK-16]
	_ = x[MikrotikTotalLimit-17]
	_ = x[MikrotikTotalLimitGigawords-18]
	_ = x[MikrotikAddressList-19]
	_ = x[MikrotikWirelessMPKey-20]
	_ = x[MikrotikWirelessComment-21]
	_ = x[MikrotikDelegatedIPv6Pool-22]
	_ = x[Mikrotik_DHCP_Option_Set-23]
	_ = x[Mikrotik_DHCP_Option_Param_STR1-24]
	_ = x[Mikortik_DHCP_Option_Param_STR2-25]
	_ = x[Mikrotik_Wireless_VLANID-26]
	_ = x[Mikrotik_Wireless_VLANIDtype-27]
	_ = x[Mikrotik_Wireless_Minsignal-28]
	_ = x[Mikrotik_Wireless_Maxsignal-29]
}

const (
	_AttributeType_name_0 = "UserNameUserPasswordCHAPPasswordNASIPAddressNASPortServiceTypeFramedProtocolFramedIPAddressFramedIPNetmaskFramedRoutingFilterIdFramedMTUFramedCompressionLoginIPHostLoginServiceLoginTCPPortMSMPPERecvKeyReplyMessageCallbackNumberCallbackIdMikrotikWirelessCommentFramedRouteFramedIPXNetworkStateClassVendorSpecificSessionTimeoutIdleTimeoutTerminationActionCalledStationIdCallingStationIdNASIdentifierProxyStateLoginLATServiceLoginLATNodeLoginLATGroupFramedAppleTalkLinkFramedAppleTalkNetworkFramedAppleTalkZoneAcctStatusTypeAcctDelayTimeAcctInputOctetsAcctOutputOctetsAcctSessionIdAcctAuthenticAcctSessionTimeAcctInputPacketsAcctOutputPacketsAcctTerminateCauseAcctMultiSessionIdAcctLinkCountAcctInputGigawordsAcctOutputGigawordsUnassigned1EventTimestampEgressVLANIDIngressFiltersEgressVLANNameUserPriorityTableCHAPChallengeNASPortTypePortLimitLoginLATPortTunnelTypeTunnelMediumTypeTunnelClientEndpointTunnelServerEndpointAcctTunnelConnectionTunnelPasswordARAPPasswordARAPFeaturesARAPZoneAccessARAPSecurityARAPSecurityDataPasswordRetryPromptConnectInfoConfigurationTokenEAPMessageMessageAuthenticatorTunnelPrivateGroupIDTunnelAssignmentIDTunnelPreferenceARAPChallengeResponseAcctInterimIntervalAcctTunnelPacketsLostNASPortIdFramedPoolCUITunnelClientAuthIDTunnelServerAuthIDNASFilterRuleUnassignedOriginatingLineInfoNASIPv6AddressFramedInterfaceIdFramedIPv6PrefixLoginIPv6HostFramedIPv6RouteFramedIPv6PoolErrorCauseEAPKeyNameDigestResponseDigestRealmDigestNonceDigestResponseAuthDigestNextnonceDigestMethodDigestURIDigestQopDigestAlgorithmDigestEntityBodyHashDigestCNonceDigestNonceCountDigestUsernameDigestOpaqueDigestAuthParamDigestAKAAutsDigestDomainDigestStaleDigestHA1SIPAORDelegatedIPv6PrefixMIP6FeatureVectorMIP6HomeLinkPrefixOperatorNameLocationInformationLocationDataBasicLocationPolicyRulesExtendedLocationPolicyRulesLocationCapableRequestedLocationInfoFramedManagementProtocolManagementTransportProtectioManagementPolicyIdManagementPrivilegeLevelPKMSSCertPKMCACertPKMConfigSettingsPKMCryptosuiteListPKMSAIDPKMSADescriptorPKMAuthKeyDSLiteTunnelNameMobileNodeIdentifierServiceSelectionPMIP6HomeLMAIPv6AddressPMIP6VisitedLMAIPv6AddressPMIP6HomeLMAIPv4AddressPMIP6VisitedLMAIPv4AddressPMIP6HomeHNPrefixPMIP6VisitedHNPrefixPMIP6HomeInterfaceIDPMIP6VisitedInterfaceIDPMIP6HomeIPv4HoAPMIP6VisitedIPv4HoAPMIP6HomeDHCP4ServerAddressPMIP6VisitedDHCP4ServerAddrePMIP6HomeDHCP6ServerAddressPMIP6VisitedDHCP6ServerAddreUnassignedStart"
	_AttributeType_name_1 = "UnassignedEndExperimentalStart"
	_AttributeType_name_2 = "ExperimentalEndImplementationSpecificStart"
	_AttributeType_name_3 = "ImplementationSpecificEndReservedStart"
	_AttributeType_name_4 = "ReservedEnd"
)

var (
	_AttributeType_index_0 = [...]uint16{0, 8, 20, 32, 44, 51, 62, 76, 91, 106, 119, 127, 136, 153, 164, 176, 188, 201, 213, 227, 237, 260, 271, 287, 292, 297, 311, 325, 336, 353, 368, 384, 397, 407, 422, 434, 447, 466, 488, 507, 521, 534, 549, 565, 578, 591, 606, 622, 639, 657, 675, 688, 706, 725, 736, 750, 762, 776, 790, 807, 820, 831, 840, 852, 862, 878, 898, 918, 938, 952, 964, 976, 990, 1002, 1018, 1031, 1037, 1048, 1066, 1076, 1096, 1116, 1134, 1150, 1171, 1190, 1211, 1220, 1230, 1233, 1251, 1269, 1282, 1292, 1311, 1325, 1342, 1358, 1371, 1386, 1400, 1410, 1420, 1434, 1445, 1456, 1474, 1489, 1501, 1510, 1519, 1534, 1554, 1566, 1582, 1596, 1608, 1623, 1636, 1648, 1659, 1668, 1674, 1693, 1710, 1728, 1740, 1759, 1771, 1795, 1822, 1837, 1858, 1882, 1910, 1928, 1952, 1961, 1970, 1987, 2005, 2012, 2027, 2037, 2053, 2073, 2089, 2112, 2138, 2161, 2187, 2204, 2224, 2244, 2267, 2283, 2302, 2329, 2357, 2384, 2412, 2427}
	_AttributeType_index_1 = [...]uint8{0, 13, 30}
	_AttributeType_index_2 = [...]uint8{0, 15, 42}
	_AttributeType_index_3 = [...]uint8{0, 25, 38}
)

func (i AttributeType) String() string {
	switch {
	case 1 <= i && i <= 161:
		i -= 1
		return _AttributeType_name_0[_AttributeType_index_0[i]:_AttributeType_index_0[i+1]]
	case 191 <= i && i <= 192:
		i -= 191
		return _AttributeType_name_1[_AttributeType_index_1[i]:_AttributeType_index_1[i+1]]
	case 223 <= i && i <= 224:
		i -= 223
		return _AttributeType_name_2[_AttributeType_index_2[i]:_AttributeType_index_2[i+1]]
	case 240 <= i && i <= 241:
		i -= 240
		return _AttributeType_name_3[_AttributeType_index_3[i]:_AttributeType_index_3[i+1]]
	case i == 254:
		return _AttributeType_name_4
	default:
		return "AttributeType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
